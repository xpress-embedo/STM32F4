# Refernce Taken from the following website
# https://dev.to/younup/cmake-on-stm32-the-beginning-3766
cmake_minimum_required(VERSION 3.23)

project(01-LedBlinkCMake)

OPTION( GNU_IAR_COMPILER_SELECT "Set ON for GNU and OFF for IAR" ON )

if( GNU_IAR_COMPILER_SELECT )
  enable_language( C ASM )
  set( CMAKE_C_STANDARD             99 )
  set( CMAKE_C_STANDARD_REQUIRED    ON )
  set( CMAKE_C_EXTENSIONS           OFF )

  # Files Generated by STM32CubeMX
  set(  C_SOURCES
        Src/main.c 
        Src/stm32f4xx_it.c 
        Src/stm32f4xx_hal_msp.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c 
        Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c 
        Src/system_stm32f4xx.c 
        startup_stm32f401xe.s
        )

  set( EXECUTABLE ${PROJECT_NAME}.out )

  add_executable( ${EXECUTABLE} ${C_SOURCES} )

  target_compile_definitions(${EXECUTABLE} PRIVATE -DUSE_HAL_DRIVER -DSTM32F401xE)

  target_include_directories( ${EXECUTABLE} PRIVATE 
                              Inc
                              Drivers/STM32F4xx_HAL_Driver/Inc
                              Drivers/STM32F4xx_HAL_Driver/Inc/Legacy
                              Drivers/CMSIS/Device/ST/STM32F4xx/Include
                              Drivers/CMSIS/Include
                              )
  target_compile_options( ${EXECUTABLE} PRIVATE
                          -mcpu=cortex-m4
                          -mthumb
                          -mfpu=fpv4-sp-d16
                          -mfloat-abi=hard
                          -fdata-sections
                          -ffunction-sections
                          -Wall
                          $<$<CONFIG:Debug>:-Og>
                          )

  target_link_options( ${EXECUTABLE} PRIVATE
                      -T${CMAKE_SOURCE_DIR}/STM32F401VETx_FLASH.ld
                      -mcpu=cortex-m4
                      -mthumb
                      -mfpu=fpv4-sp-d16
                      -mfloat-abi=hard
                      -specs=nano.specs
                      -lc
                      -lm
                      -lnosys
                      -Wl,-Map=${PROJECT_NAME}.map,--cref
                      -Wl,--gc-sections
                      )

  # Print executable size
  add_custom_command( TARGET ${EXECUTABLE} 
                      POST_BUILD
                      COMMAND arm-none-eabi-size ${EXECUTABLE}
                      )

  # Create hex file
  add_custom_command( TARGET ${EXECUTABLE}
                      POST_BUILD
                      COMMAND arm-none-eabi-objcopy -O ihex ${EXECUTABLE} ${PROJECT_NAME}.hex
                      COMMAND arm-none-eabi-objcopy -O binary ${EXECUTABLE} ${PROJECT_NAME}.bin
                      )
# Make sure arm-none-eabi-gcc is in path, I updated the environment variable with this
# C:\ST\STM32CubeIDE\STM32CubeIDE\plugins\com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.10.3-2021.10.win32_1.0.0.202111181127\tools\bin
# when building inside the build folder
# cmake -G "MinGW Makefiles" --toolchain=../cmake/arm-none-eabi-gcc.cmake -DCMAKE_BUILD_TYPE=Debug ..
# when building from the root folder
# cmake -Bbuild -G "MinGW Makefiles" --toolchain=cmake/arm-none-eabi-gcc.cmake
# cmake --build build
else()
  target_compile_options( ${EXECUTABLE} PRIVATE 
                          --cpu=Cortex-M4 
                          --fpu=VFPv4_sp 
                          --dlib_config normal
                          )

  target_link_options(  ${EXECUTABLE} PRIVATE 
                        --semihosting 
                        --config EWARM/stm32f401xe_flash.icf
                        )


# cmake -BbuildIAR -G "Ninja Multi-Config" --toolchain .\cmake\iar-toolchain.cmake
# cmake --build build
endif(GNU_IAR_COMPILER_SELECT)
